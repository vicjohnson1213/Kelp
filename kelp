#! /usr/bin/env node

var fs = require('fs'),
    _ = require('lodash'),
    prompt = require('minimal-prompt'),
    chalk = require('chalk'),
    program = require('commander'),
    parse = require('./lib/parser.js'),
    interpret = require('./lib/interpreter.js'),
    filename,
    code, result;

// 'Runs a program written in the Kelp language. If <filename> is ommitted, an interactive shell will open where functions can be executed.'
program
    .version('1.0.0')
    .arguments('[filename]')
    .option('-p, --parse-only', 'Parse a Kelp program.')
    .option('-i, --interpret-only', 'Interpret a previously parsed Kelp program.')
    .option('-o, --output [filename]', 'Output the results to the specified file.')
    .action(function(file) {
        filename = file;
    })
    .parse(process.argv);

// If there is no filename, open an interactive propmt to execute different commands.
if (!filename) {
    var env = {};
    prompt.repeat({
        prompt: '>> ',
        delimiter: '',
        formatPrompt: function(p, d) {
            return p;
        },
        onLine: function(res) {
            console.log(formatOutput(interpret(parse(res))[0]));
        }
    });

    prompt.start();
} else {
    try {
         code = fs.readFileSync(filename, 'utf8');
    } catch (e) {
        console.log("Error reading file.");
        process.exit(1);
    }

    if (program.parseOnly) {
        result = JSON.stringify(parse(code), null, 2);
    } else {
        var output = program.interpretOnly ? interpret(JSON.parse(code)) : interpret(parse(code));

        result = output.filter(function(el) {
            return el !== undefined && el !== null;
        }).map(function(el) {
            return formatOutput(el);
        }).join('\n');
    }

    if (program.output) {
        var outFileName;

        if (typeof program.output === 'boolean') {
            console.log('Output filename is required.');
            process.exit(1);
        }

        fs.writeFile(program.output, result, function(err) {
            if (err) {
                console.log('Error saving file');
                process.exit(1);
            }
        });
    } else {
        console.log(result);
    }

    process.exit(0);
}

function formatOutput(output) {
    if (output.type === 'error') {
        var callStack = output.callStack;
        output = chalk.red(output.message) + '\n';
        output += 'Stack Trace:\n';

        // need to format the stack trace.
        _.forEach(callStack, function(el, idx) {
            output += '>' +  _.repeat(' ', idx + 1) + el + '\n';
        });
    }

    return output;
}